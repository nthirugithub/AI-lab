def mc_problem():
    from collections import deque
    visited = set()
    q = deque([((3,3,1), [])])
    while q:
        (m, c, b), path = q.popleft()
        if (m, c, b) in visited: continue
        visited.add((m, c, b))
        if (m, c, b) == (0, 0, 0):
            print("Solved:", path + [(0,0,0)])
            return
        moves = [(1,0),(2,0),(0,1),(0,2),(1,1)]
        for dm, dc in moves:
            if b:
                new = (m - dm, c - dc, 0)
            else:
                new = (m + dm, c + dc, 1)
            if all(0 <= x <= 3 for x in new[:2]) and (new[0] == 0 or new[0] >= new[1]) and ((3 - new[0]) == 0 or (3 - new[0]) >= (3 - new[1])):
                q.append((new, path + [(m,c,b)]))
mc_problem()
